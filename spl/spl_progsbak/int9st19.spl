
//Setting Mode Bit to 9
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

//Storing User SP for future use
	alias userSP R0;
	userSP = SP;

//Storing UPTR of current process
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

//Setting SP to the start of kernel stack
	SP = ( [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] *512 ) - 1;


//Getting argument(filename) from user stack
	alias filename R1;
	filename = [[PTBR + 2*((userSP-4)/512)]*512  +  (userSP-4)%512];


//Checking inode copy in memory for required file
	alias i R7;
	i=0;

	while (i<MAX_FILE_NUM) do
		if ([INODE_TABLE + 16*i + 1] == filename && [INODE_TABLE + 16*i + 0] == EXEC) then
			break;
		endif;
		i=i+1;
	endwhile;
	
	if(i==MAX_FILE_NUM) then 							//Required file is absent in inode table
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;		//Setting Mode Bit to 0
		SP=userSP;
		[[PTBR + 2*((userSP-1)/512)]*512  +  (userSP-1)%512] = -1;		//Return -1 indicating file not found
		ireturn;
	endif;
	
	
// i contains inode index of required file
	
	alias exitPID R3;
	exitPID = [SYSTEM_STATUS_TABLE + 1];
	
	multipush(R0,R1,R2,R3,R7);
	
//Calling exit process
	R1=3;										//Function number for exit process
	R2=[SYSTEM_STATUS_TABLE + 1];
	
	call PROCESS_MANAGER;
	
	multipop(R0,R1,R2,R3,R7);
	
	
	alias UApage R4;								//Obtaining user area page of exited process
	UApage = [PROCESS_TABLE + 16*exitPID +11];
	
	
	
//Updating Memory Free List
	[MEMORY_FREE_LIST + UApage] = [MEMORY_FREE_LIST + UApage] + 1;
//Updating MEM_FREE_COUNT in system status table
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
	
	
//Setting SP to start of UserAreaPage and initialising kernel stack of new process
	SP=UApage*512 - 1;
	
	
	
//Setting up Per-Process Resource table in User Area Page
	
	alias word R10;
	word=496;
	
	while(word<512) do
		[UApage*512 + word] = -1;		//Initialising all entries as invalid
		word = word+2;
	endwhile;
	
	
//Updating STATE and inode index in process table
	[PROCESS_TABLE + 16*exitPID + 4]=RUNNING;
	[PROCESS_TABLE + 16*exitPID + 7]=i;
	
	




//ALLOCATING NEW PAGES AND SETTING PAGE TABLE ENTRIES FOR THE NEW PROCESS

alias free R5;
alias base R6;

PTBR = [PROCESS_TABLE + 16*exitPID + 14];



//Stack Page 1
		
	multipush(R0,R1,R2,R3,R4,R7);	
	R1=1;				//Function Number for GET_FREE_PAGE
	call MOD_2;		//MODULE 2
	free=R0;
	multipop(R0,R1,R2,R3,R4,R7);
	[PTBR+16] = free;
	[PTBR+17]="0110";
	

//Stack Page 2
	multipush(R0,R1,R2,R3,R4,R7);
	R1=1;				//Function Number for GET_FREE_PAGE
	call MOD_2;		//MODULE 2
	free=R0;
	multipop(R0,R1,R2,R3,R4,R7);
	[PTBR+18] = free;
	[PTBR+19]="0110";
	

//Setting up a single code page
	if([INODE_TABLE + 16*i + 8]!=-1) then
		multipush(R0,R1,R2,R3,R4,R7);
		R1=5;						//Function Number for get code page function
		R2=[INODE_TABLE + 16*i+ 8];		
		call MOD_2;
		free=R0;
		multipop(R0,R1,R2,R3,R4,R7);
		[PTBR+8]=free;
		[PTBR+9]="0100";
	endif;

//Invalidating other code page entries

	[PTBR+10]=-1;
	[PTBR+11]="0000";
	[PTBR+12]=-1;
	[PTBR+13]="0000";
	[PTBR+14]=-1;
	[PTBR+15]="0000";
	

[DISK_MAP_TABLE + 10*exitPID + 0] =-1;
[DISK_MAP_TABLE + 10*exitPID + 1] =-1;
[DISK_MAP_TABLE + 10*exitPID + 2] =-1;
[DISK_MAP_TABLE + 10*exitPID + 3] =-1;
[DISK_MAP_TABLE + 10*exitPID + 4] =[INODE_TABLE + 16*i +8];
[DISK_MAP_TABLE + 10*exitPID + 5] =[INODE_TABLE + 16*i +9];
[DISK_MAP_TABLE + 10*exitPID + 6] =[INODE_TABLE + 16*i +10];
[DISK_MAP_TABLE + 10*exitPID + 7] =[INODE_TABLE + 16*i +11];
[DISK_MAP_TABLE + 10*exitPID + 8] =-1;
[DISK_MAP_TABLE + 10*exitPID + 9] =-1;




//Setting entry point to top of user stack	
[[PTBR+16]*512] = [[PTBR+8]*512 + 1];
SP = 8*512;

//Changing mode flag back to user mode
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9]=0;


breakpoint;
ireturn;


	
	
	
	
	
	
