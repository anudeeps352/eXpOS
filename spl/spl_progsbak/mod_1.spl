//Process Manager Module

alias functionNum R1;
alias currentPID R2;
PTBR=[PROCESS_TABLE + currentPID*16 + 14];
if(functionNum==2)then
    breakpoint;
	print "enteringproce2";
    alias userAreaPageNo R3;
    userAreaPageNo=[PROCESS_TABLE+currentPID*16+11];
    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
    R1=2;
	R2=userAreaPageNo;
	call MOD_2;
    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
	print "exitingproc2";
    return;
endif;

if(functionNum==3)then //exitprocess
    //free pagetable entries
	print "enteringproc3";
    multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
    R1=4;
    R2=currentPID;
    call MOD_1;
    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);

    //free userarea page
     multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
    R1=2;
    R2=currentPID;
    call MOD_1;
    multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
    [PROCESS_TABLE+16*currentPID+4]=TERMINATED;
	print "exitingproc3";
    return;
endif;

if(functionNum==4)then  //freepgtable
    PTBR=PAGE_TABLE_BASE+currentPID*20;
	print "enteringproc4";
	
	if([DISK_MAP_TABLE + 10*currentPID+ 2] != -1) then	//Heap Page 1
    			multipush(R1,R2,R3,R4);
    			R1 = 4;					//Function number for release block in memory manager												
    			R3 = currentPID;
    			R2 = [DISK_MAP_TABLE + 10*currentPID + 2];
    			call MOD_2;
				print "check1";
    			multipop(R1,R2,R3,R4);
    		endif;

    		if([DISK_MAP_TABLE + 10*currentPID + 3] != -1) then	//Heap Page 2
    			multipush(R1,R2,R3,R4);
    			R1 = 4;
    			R3 = currentPID;
    			R2 = [DISK_MAP_TABLE + 10*currentPID + 3];
    			call MOD_2;
    			multipop(R1,R2,R3,R4);
    		endif;   

    		if([DISK_MAP_TABLE + 10*currentPID + 8] != -1) then	//Stack Page 1
    			multipush(R1,R2,R3,R4);
    			R1 = 4;
    			R3 = currentPID;
    			R2 = [DISK_MAP_TABLE + 10*currentPID + 8];
    			call MOD_2;
    			multipop(R1,R2,R3,R4);
    		endif;

    		if([DISK_MAP_TABLE + 10*currentPID + 9] != -1) then    //Stack Page 2
    			multipush(R1,R2,R3,R4);
    			R1 = 4;
    			R3 = currentPID;
    			R2 = [DISK_MAP_TABLE + 10*currentPID + 9];
    			call MOD_2;
				print "check2";
    			multipop(R1,R2,R3,R4);
    		endif;   
    		
    		alias i R4;
    		i=0;
    		while (i<10) do
    			[DISK_MAP_TABLE + currentPID*10 + i]=-1;
    			i=i+1;
    		endwhile;
	
	alias p R7;
		p=4;
		while(p<20) do
			print "inside loop";
			if([PTBR+p]!=-1) then
				backup;
				R1=2;
				R2=[PTBR+p];
				print "entering mod2call";
				call MOD_2;
				restore;
				[PTBR+p]=-1;
				[PTBR+p+1]="0000";
			endif;
			p=p+2;
		endwhile;
	
	print "midway";
	//removing blocks using disk map table

	alias disk_map R8;
	disk_map = DISK_MAP_TABLE + 10*currentPID; //disk map table base

	
	i=0;

	while(i<=9) do
		if( ([disk_map+i]!=-1) && (i==2 || i==3 || i==8 || i==9) ) then
			backup;
			//Invoking release block function
			R1=4; //Function number of release block function in MOD_0
			R2= [disk_map+i]; //block number to be released
			call MOD_2;
			restore;
		endif;
		[disk_map+i]=-1; //setting all values to -1
		i=i+1;
	endwhile;
	print "exitingproc4";
	
	return;
endif;        