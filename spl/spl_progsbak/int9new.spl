//Setting Mode Bit to 9
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

//Storing User SP for future use
	alias userSP R0;
	userSP = SP;

//Storing UPTR of current process
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

//Setting SP to the start of kernel stack
	SP = ( [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] *512 ) - 1;

//Getting argument(filename) from user stack
	alias filename R1;
	filename = [[PTBR + 2*((userSP-4)/512)]*512  +  (userSP-4)%512];

//Checking inode copy in memory for required file
	alias i R7;
	i=0;

	while (i<MAX_FILE_NUM) do
		if ([INODE_TABLE + 16*i + 1] == filename && [INODE_TABLE + 16*i + 0] == EXEC) then
			break;
		else
		i=i+1;
		endif;
	endwhile;
	
	if(i==MAX_FILE_NUM) then 							//Required file is absent in inode table
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;		//Setting Mode Bit to 0
		SP=userSP;
		[[PTBR + 2*((userSP-1)/512)]*512  +  (userSP-1)%512] = -1;		//Return -1 indicating file not found
		ireturn;
	endif;
	
// i contains inode index of required file
	
	alias exitPID R3;
	exitPID = [SYSTEM_STATUS_TABLE + 1];
	
	multipush(R0,R1,R2,R3);
	
//Calling exit process
	R1=3;										//Function number for exit process
	R2=[SYSTEM_STATUS_TABLE + 1];
	
	call PROCESS_MANAGER;
	
	multipop(R0,R1,R2,R3);
	
	alias UserAreapage R4;				//Obtaining user area page of exited process
	UserAreapage = [PROCESS_TABLE + 16*exitPID +11];
	
//Updating Memory Free List
	[MEMORY_FREE_LIST + UserAreapage] = [MEMORY_FREE_LIST + UserAreapage] + 1;
//Updating MEM_FREE_COUNT in system status table
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + -1;
		
//Setting SP to start of UserAreaPage and initialising kernel stack of new process
	SP=UserAreapage*512 - 1;

//setting up per resource table in userarea page

    alias word R10;
    word=496;

    while(word<512)do
        [UserAreapage*512+word]=-1;
        word=word+2;
    endwhile;    
	
//Updating STATE and inode index in process table
	[PROCESS_TABLE + 16*exitPID + 4]=RUNNING;
	[PROCESS_TABLE + 16*exitPID + 7]=i;
		
//ALLOCATING NEW PAGES AND SETTING PAGE TABLE ENTRIES FOR THE NEW PROCESS

alias free R5;
alias base R6;

PTBR = [PROCESS_TABLE + 16*exitPID + 14];

//Stack Page 1
	multipush(R0,R1,R2,R3,R4,R5);
	R1=1;				//Function Number for GET_FREE_PAGE
	call MEMORY_MANAGER;		//MODULE 2
	free=R0;
	[PTBR+16] = free;
	[PTBR+17]="0110";
		
//Stack Page 2
	R1=1;
	call MEMORY_MANAGER;		//MODULE 2
	free=R0;
	[PTBR+18] = free;
	[PTBR+19]="0110";
	
//Heap Page 1
	
	R1=1;				//Function Number for GET_FREE_PAGE
	call MEMORY_MANAGER;		//MODULE 2
	free=R0;
	
	
	[PTBR+4] = free;
	[PTBR+5]="0110";
	
//Heap Page 2
	
	R1=1;				//Function Number for GET_FREE_PAGE
	call MEMORY_MANAGER;		//MODULE 2
	free=R0;
	
	
	[PTBR+6] = free;
	[PTBR+7]="0110";
	
//Code
	
	if([INODE_TABLE + 16*i + 8] != -1) then
		
		R1=1;
		call MEMORY_MANAGER;
		free=R0;
		
		
		[PTBR+8]=free;
		[PTBR+9]="0100";
	endif;
	
	if([INODE_TABLE + 16*i + 9] != -1) then
		
		R1=1;
		call MEMORY_MANAGER;
		free=R0;
		
		
		[PTBR+10]=free;
		[PTBR+11]="0100";
	endif;
	
	if([INODE_TABLE + 16*i + 10] != -1) then
		
		R1=1;
		call MEMORY_MANAGER;
		free=R0;
		
		
		[PTBR+12]=free;
		[PTBR+13]="0100";
	endif;
	
	if([INODE_TABLE + 16*i + 11] != -1) then
		
		R1=1;
		call MEMORY_MANAGER;
		free=R0;
		
		
		[PTBR+14]=free;
		[PTBR+15]="0100";
	endif;
	
	multipop(R0,R1,R2,R3,R4,R5);
	R10=[PTBR+8];
	
//Loading code blocks from disk to memory

	if([INODE_TABLE + 16*i + 8] != -1) then
		multipush(R0,R1,R2,R3,R4,R5,R6);
		R1=2;
		R2=[SYSTEM_STATUS_TABLE + 1];
		R3=[PTBR+8];
		R4=[INODE_TABLE + 16*i + 8];
		call MOD_4;
		multipop(R0,R1,R2,R3,R4,R5,R6);
	endif;	
		

	if([INODE_TABLE + 16*i + 9] != -1) then
		
		multipush(R0,R1,R2,R3,R4,R5,R6);
		R1=2;
		R2=[SYSTEM_STATUS_TABLE + 1];
		R3=[PTBR+10];
		R4=[INODE_TABLE + 16*i + 9];
		call MOD_4;
		multipop(R0,R1,R2,R3,R4,R5,R6);
	endif;
	
	if([INODE_TABLE + 16*i + 10] != -1) then
		
		multipush(R0,R1,R2,R3,R4,R5,R6);
		R1=2;
		R2=[SYSTEM_STATUS_TABLE + 1];
		R3=[PTBR+12];
		R4=[INODE_TABLE + 16*i + 10];
		call MOD_4;
		multipop(R0,R1,R2,R3,R4,R5,R6);
	endif;
	
	if([INODE_TABLE + 16*i + 11] != -1) then
		
		multipush(R0,R1,R2,R3,R4,R5,R6);
		R1=2;
		R2=[SYSTEM_STATUS_TABLE + 1];
		R3=[PTBR+14];
		R4=[INODE_TABLE + 16*i + 11];
		call MOD_4;
		multipop(R0,R1,R2,R3,R4,R5,R6);
	endif;
	

//Setting entry point to top of user stack	
[[PTBR+16]*512] = [[PTBR+8]*512 + 1];
SP = 8*512;

//Changing mode flag back to user mode
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 9]=0;
ireturn;
