alias functionNum R1;
alias currentPID R2;

//Acquire Terminal Function
if(functionNum == 8) then
	
	while([TERMINAL_STATUS_TABLE]==1) do
		[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
		multipush(R1,R2);
		call SCHEDULER;
		multipop(R1,R2);
	endwhile;
	
	[TERMINAL_STATUS_TABLE]=1;
	[TERMINAL_STATUS_TABLE + 1]=currentPID;
	
	return;

endif;



//Release Terminal Function
if(functionNum == 9) then
	
	if(currentPID != [TERMINAL_STATUS_TABLE + 1]) then
		R0=-1;
		return;
	endif;
	
	[TERMINAL_STATUS_TABLE]=0;
	
	alias i R4;
	i=0;
	
	while(i<16) do
		if([PROCESS_TABLE + (i * 16) + 1] != -1 && [PROCESS_TABLE + (i * 16) + 4] == WAIT_TERMINAL) then
			[PROCESS_TABLE + (i * 16) + 4] = READY;
		endif;
		i=i+1;
	endwhile;
		
	R0=0;
	return;

endif;






//Acquire Disk Function
if(functionNum == 3) then

	while([DISK_STATUS_TABLE] == 1) do
		
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
		
		multipush(R1,R2);
		call MOD_5;
		multipop(R1,R2);
		
	endwhile;
	
	
	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;
	
	return;
	
endif;
		
