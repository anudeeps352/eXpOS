
alias userSP R2;
userSP = SP;

[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 7;           //set mode flag to           
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 13] = SP;

SP = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 11]*512 - 1;    //switch stack

alias filedesc R3;
filedesc = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

alias returnaddress R4;
alias readaddress R5;

returnaddress=[PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512;
readaddress=[[PTBR + 2*((userSP-3)/512)]*512 + (userSP-3)%512];

if(filedesc == -1) then       //input is to be read from terminal
    multipush(R1,R2,R3,R4,R5);
    R1 = TERMINAL_READ;
    R2 = [SYSTEM_STATUS_TABLE + 1];             //call terminal read
    R3 = readaddress;
    call DEVICE_MANAGER;
    multipop(R1,R2,R3,R4,R5);
else
    if(filedesc < 0 || filedesc > 7) then       //valid filedesc
        [returnaddress] = -1;
        [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    alias resource_table R6;
    resource_table = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1]+ 11]*512+RESOURCE_TABLE_OFFSET;

    if([resource_table + 2*filedesc] != FILE) then      //if file desc not file return -1
        [returnaddress] = -1;
        [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    alias open_file_entry R7;
    open_file_entry = [resource_table + 2*filedesc + 1];
                                                                        //prep necess variables
    alias open_file_table R8;
    open_file_table = OPEN_FILE_TABLE + 4*open_file_entry;

    alias inode_index R9;
    inode_index = [open_file_table + 0];


    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);              //acquire node by calling 
    R1 = ACQUIRE_INODE;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = inode_index;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

    if(R0 == -1) then
        [returnaddress] = -1;
        [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;   //if failure return -1
        SP = userSP;
        ireturn;
    endif;

    alias lseek R10;
    lseek = [open_file_table + 2]; //get lseek position from openfile table 

    alias physicaladr R11;
    physicaladr = [PTBR+2*((readaddress)/512)]*512 + (readaddress)%512;  //get physical address
    if(inode_index == INODE_ROOT) then                                  //correspoding to logical address
        if(lseek == 480) then                                           //of memory buffer given as input
            backup;
            R1 = RELEASE_INODE;
            R2 = [SYSTEM_STATUS_TABLE + 1];                             //if file is root file
            R3 = inode_index;                                           //release inode and return -2
            call RESOURCE_MANAGER;
            restore;
            [returnaddress] = -2;
            [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
            SP = userSP;
            ireturn;
        endif;
        [physicaladr] = [ROOT_FILE + lseek];                            //read from word at lseek pos
        [open_file_table + 2] = [open_file_table + 2] + 1;              //increment lseek pos

    else
        if(lseek == [INODE_TABLE + inode_index*16 + 2]) then              //if lseek same as file size
            backup;                                                     //release inode and return -2
            R1 = RELEASE_INODE;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = inode_index;
            call RESOURCE_MANAGER;
            restore;

            [returnaddress] = -2;
            [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
            SP = userSP;
            ireturn;
        endif;    

        alias block_num R12;
        alias offset R13;

        block_num = [INODE_TABLE + 16*inode_index + 8 + (lseek/512)];       //find disk block num
        offset = lseek%512;                                                 //and position in block from which input is read

        backup;
        R1 = BUFFERED_READ;
        R2 = block_num;
        R3 = offset;                                                        //read data from file buffer
        R4 = physicaladr;
        call FILE_MANAGER;
        restore;

        [open_file_table+2] = [open_file_table+2] + 1;
    endif;

    backup;
    R1 = RELEASE_INODE;
    R2 = [SYSTEM_STATUS_TABLE + 1];                                         //release lock by calling release inode
    R3 = inode_index;
    call RESOURCE_MANAGER;
    restore;

endif;

[returnaddress] = 0;
[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE+1] + 9] = 0;
SP = userSP;
ireturn;    