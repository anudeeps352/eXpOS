//Resource manager module

alias functionNum R1;
alias currentPID R2;
alias counter R3;


if(functionNum==4)then //acquire inode
	alias index R14;
	index=R3;
	while([FILE_STATUS_TABLE+4*index+0]!=-1) do //while file status table is locked
		[PROCESS_TABLE+16*currentPID+4]=WAIT_FILE; //set state to wait and schedule another process
		[PROCESS_TABLE+16*currentPID+5]=index;
		backup;
		call MOD_5;
		restore;
	endwhile;

	//Checking if file is deleted
	if([INODE_TABLE+16*index+1]==-1) then
		R0=-1;
		return;
	endif;

	//Locking the inode
	[FILE_STATUS_TABLE+4*index+0]=currentPID;

	R0=0;
	return;
endif;	

if(functionNum==5) then //Release inode
	
	alias index R14;
	index=R3;
	if(currentPID != [FILE_STATUS_TABLE+4*index+0]) then //if pid is not equal to locking id return -1
		R0=-1;
		return;
	endif;

	//Setting lock field to -1   //remove lock
	[FILE_STATUS_TABLE+4*index+0]=-1;

	alias i R8;
	i=0;
	while(i<=15) do
		if([PROCESS_TABLE+16*i+4]==WAIT_FILE &&  //scedule all other process requiring inode 
			[PROCESS_TABLE+16*i+5]==index) then

			[PROCESS_TABLE+16*i+4]=READY;
		endif;
		i=i+1;
	endwhile;

	R0=0;
	return;

endif;

if(functionNum == 8) then //aquire terminal
	
	while([TERMINAL_STATUS_TABLE + 0] == 1) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL; //state set to wait terminal
        multipush(R1,R2,R3);
		print "called sched";
        call MOD_5;
        multipop(R1,R2,R3);
    endwhile;

    [TERMINAL_STATUS_TABLE + 0 ]=1;  //state of terminal status table
    [TERMINAL_STATUS_TABLE + 1]=currentPID; //pid of terminal status table

	
    return;

endif;



if(functionNum == 9)then //release terminal
	
	if(currentPID != [TERMINAL_STATUS_TABLE + 1]) then
		R0 = -1;
		return;
	else
		[TERMINAL_STATUS_TABLE + 0] = 0;
		alias counter R6;
		counter = 1;
			while(counter <= 15) do
				if([PROCESS_TABLE + (counter*16) + 4] == WAIT_TERMINAL) then
					[PROCESS_TABLE + (counter*16) + 4] = READY;
				endif;
		counter = counter + 1;
		endwhile;
		R0 = 0;
		
		return;
	endif;
endif;	




if(functionNum==3)then //acquire disk
	
	while(DISK_STATUS_TABLE ==1)do
		[PROCESS_TABLE+R2*16+4]=WAIT_DISK;
		multipush(R1,R2);
		call MOD_5;
		multipop(R1,R2);
	endwhile;

	[DISK_STATUS_TABLE]=1;
	[DISK_STATUS_TABLE+4]=R2;
	
	return;
endif;		

//acquire semaphore
if(functionNum==6)then
	alias i R13;
	alias free_index R14;
	free_index=-1;
	i=0;
	while(i<32)do 
		if([SEMAPHORE_TABLE+i*4+1]==0)then
			free_index=i;
			break;
			i=i+1;
		endif;
	endwhile;

	if(free_index==-1)then
		R0=-1;
		return;
	endif;

	[SEMAPHORE_TABLE+free_index*4+0]=-1; //Setting Locking PID field to -1 i.e free
	[SEMAPHORE_TABLE+free_index*4+1]=1;  //Setting PROCESS_COUNT field to 1	i.e sharing

	R0=free_index;
	return;
endif;


if(functionNum==7) then // Release Semaphore
	alias semtable_index R10;
	semtable_index = R3;

	if([SEMAPHORE_TABLE+4*semtable_index]==[R2+1]) then
		
		[SEMAPHORE_TABLE+4*semtable_index+0]=-1;
		alias i R11;
		i=0;
		while(i<=15) do
			print "check";
			if([PROCESS_TABLE+(16*i)+4]==WAIT_SEMAPHORE && 
				[PROCESS_TABLE+(16*i)+5]==semtable_index) then
				[PROCESS_TABLE+16*i+4]=READY;

			endif;
			i=i+1;
		endwhile;

	endif;

	[SEMAPHORE_TABLE+4*semtable_index+1]=[SEMAPHORE_TABLE+4*semtable_index+1]-1;
	R0=0;
	return;

endif;

if(functionNum==1)then //acquire buffer
	alias buffer_index R3;
	
	while([BUFFER_TABLE + 4*buffer_index + 2] != -1) do			//while buffer is locked
        [PROCESS_TABLE + 16*currentPID + 4] = WAIT_BUFFER;			//set to waiting
        [PROCESS_TABLE + 16*currentPID + 5] = buffer_index;	

		backup;
        call SCHEDULER;											//call schedule
        restore;
	endwhile;

    [BUFFER_TABLE + 4*buffer_index + 2] = currentPID;				//lock buffer using cur process pid
    return;
endif;	

if(functionNum==2)then //release buffer
	alias buffer_index R3;
	
	if([BUFFER_TABLE+4*buffer_index+2]!=currentPID) then		//if pid is not equal to locking pid
        R0 = -1;
        return;
    endif;

	[BUFFER_TABLE + 4*buffer_index + 2] = -1;		//set locking pid to -1

	alias i R4;
    i = 0;

	alias process_table R5;

    while(i < 16) do
        process_table = PROCESS_TABLE + i*16;

        if([process_table + 4] == WAIT_BUFFER && [process_table + 5] == buffer_index) then
            [process_table + 4] = READY;			//free waiting processes
        endif;
        i = i + 1;
    endwhile;

	R0 = 0;
    return;
endif;