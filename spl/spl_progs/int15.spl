//SHUTDOWN SYSTEM CALL


alias userSP R0; 
alias returnaddress R1;
userSP = SP;
returnaddress = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);

//Switching to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;          //Saving sp value in UPTR field
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1; //Switch to kernel stack


//Setting mode flag to system call number
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 21;

if([SYSTEM_STATUS_TABLE+1]!=2 || [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+3]!=1) then //if not shell process or not root user
	
	[returnaddress] = -1;

	//reset mode flag (0 indicates process is in user mode).
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	//changing back to user stack
	SP = userSP;
	ireturn;
endif;

multipush(R0, R1, R2, R3, R4);
R1 = KILL_ALL;
R2 = [SYSTEM_STATUS_TABLE + 1];								//invoke kill all func
call PROCESS_MANAGER;
multipop(R0, R1, R2, R3, R4);

//storing buffers
alias i R2;												//store buffer values into disk having dirty bit 1
i = 0;

while(i < 4) do
    // if dirty bit = 1
    if([BUFFER_TABLE + 4*i + 1] == 1) then
        multipush(R0, R1, R2, R3, R4);
        R1 = DISK_STORE;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = (71 + i);
        R4 = [BUFFER_TABLE + 4*i];
        multipop(R0, R1, R2, R3, R4);
    endif;
    i = i + 1;
endwhile;

//Storing inode table
backup; 
	R1=1;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=59;  //inodecopy address
	R4=3;
	call MOD_4;
restore;
backup;
	R1=1;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=60; //inodecopyaddress
	R4=4;
	call MOD_4;
restore;

//Storing root file
backup;
	R1=1;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=62; //rootcopyaddress
	R4=5;
	call MOD_4;
restore;

//Storing disk free list
backup;
	R1=1;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=61; //diskfreecopy address
	R4=2;
	call MOD_4;
restore;

halt;