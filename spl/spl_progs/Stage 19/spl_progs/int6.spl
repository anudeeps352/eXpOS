alias PID R6;
PID =[SYSTEM_STATUS_TABLE + 1];

//Updating mode bit of current process to 7
[PROCESS_TABLE + (PID * 16) + 9]=7;

alias userSP R0;
userSP=SP;

//Storing UPTR of current process
[PROCESS_TABLE + (PID * 16) + 13]=SP;

//Setting SP to the start of kernel stack
SP = ( [PROCESS_TABLE + (PID * 16) + 11] *512 ) - 1;


//Obtaining file descriptor from userSP

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];


//Checking if file descriptor is valid
if (fileDescriptor != -1) then
	alias physicalAddrRetVal R5;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;

else
	
	alias address R5;
	address = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	
	//Calling device manager module
	multipush(R0,R1,R2,R3,R4,R5,R6);
	alias funcnum R1;
	alias currPID R2;
	alias add R3;
	funcnum=4;
	currPID=[SYSTEM_STATUS_TABLE + 1];
	add=address;
	call MOD_4;
	multipop(R0,R1,R2,R3,R4,R5,R6);
	
	//Storing return value as 0 to indicate success
	alias physicalAddrRetVal R7;
	physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;
	
endif;

//Switching mode bit back to 0
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

//switching back to user process
SP = userSP;
ireturn;
	
	
	
	
	
	
	
	
	
	
	
