//FORK

//set mode flag of cureent process to 8(read system call)
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;

//save user stack pointer
alias userSP R13;
userSP=SP;

alias NEW_PTBR R15;
alias ParentUapage R4;
//switch to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//Invoking get pcb function to get a new pid for child process
alias NEW_PID R14;
R1=1;
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_1;
NEW_PID=R0;


if(NEW_PID==-1) then
	alias physicalAddrRetVal R12;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;

	//changing back to user stack
	SP = userSP;
	//reset mode flag (0 indicates process is in user mode).
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	ireturn;
endif;

//Allocating Heap to parent if not yet allocated

if ( [PTBR + 4] == -1 )then
    backup;
    R1 = 1;
    call MEMORY_MANAGER;
    [PTBR + 4]  = R0;
    [PTBR + 5]  = "1110";

    R1 = 1;
    call MEMORY_MANAGER;
    [PTBR + 6]  = R0;
    [PTBR + 7]  = "1110";
    restore;
endif;

NEW_PTBR=PAGE_TABLE_BASE+NEW_PID*20;

//Allocating Stack pages

backup;
//Stack Page-1
R1=1;
call MOD_2;
[NEW_PTBR+16]=R0;
[NEW_PTBR+17]=[PTBR+17];
restore;

backup;
//Stack Page-2
R1=1;
call MOD_2;
[NEW_PTBR+18]=R0;
[NEW_PTBR+19]=[PTBR+19];
restore;

//Allocating user area page

backup;
R1=1;
call MOD_2;
[PROCESS_TABLE+16*NEW_PID+11]=R0;
restore;

//Setting up of Process table for new process

alias ind R9;
ind = PROCESS_TABLE + 16*NEW_PID;

//Copiying part

//Copiying "user id"  parent process table to child process table
[PROCESS_TABLE + 16*NEW_PID + 3]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 3];

//Copiying "swap flag" parent process table to child process table
[PROCESS_TABLE + 16*NEW_PID + 6]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 6];

//Copiying "user area swap status" parent process table to child process table
[PROCESS_TABLE + 16*NEW_PID + 10]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 10];

//Copiying "inode index" parent process table to child process table
[PROCESS_TABLE + 16*NEW_PID + 7]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 7];

//Copiying "UPTR" parent process table to child process table
[PROCESS_TABLE + 16*NEW_PID + 13]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];


//Setting part

//Setting "mode flag" of child process in process table to zero
[PROCESS_TABLE + 16*NEW_PID + 9]=0;

//Setting "KPTR" of child process in process table to zero
[PROCESS_TABLE + 16*NEW_PID + 12]=0;

//Setting "TICK field" of child process in process table to zero
[PROCESS_TABLE + 16*NEW_PID + 0]=0;

//PPID of child == PID of parent
[PROCESS_TABLE + 16*NEW_PID + 2]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 1];

//State of child process is set to created
[PROCESS_TABLE + 16*NEW_PID + 4]=CREATED;


ParentUapage=[PROCESS_TABLE + 16*currPID + 11] * 512;
//copiying per process resource table from parent to child

ind=496;

while(ind<=511) do
	[ ParentUapage + ind]=[[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512 + ind];
	
	alias semtable_index R6;
	if(ind%2==0 && [ParentUapage + ind]==1) then

		semtable_index = [ParentUapage + ind + 1];
		[SEMAPHORE_TABLE+semtable_index*4+1]=[SEMAPHORE_TABLE+semtable_index*4+1]+1;

	endif;
	if(ind %2==0 && [ParentUapage + ind]==0)then //if its a file
		alias filetableindex R11;
		filetableindex=[ParentUapage + ind + 1];
		[OPEN_FILE_TABLE + 4*filetableindex + 1]=[OPEN_FILE_TABLE + 4*filetableindex + 1] + 1; 
	endif;	
	ind=ind+1;
endwhile;

//copiying per process disk map table from parent to child

alias i R10;
i=0;
while(i<=9) do
	[DISK_MAP_TABLE + 10*NEW_PID+i]=[DISK_MAP_TABLE + 10*[SYSTEM_STATUS_TABLE + 1] +i];
	i=i+1;
endwhile;

//Setting up page table entries of child process(Sharing pages)
//Copiying library entries
i=0;
while(i<=14) do
	[NEW_PTBR+i]=[PTBR+i];
	[MEMORY_FREE_LIST+[NEW_PTBR+i]]=[MEMORY_FREE_LIST+[NEW_PTBR+i]]+1;
	[NEW_PTBR+i+1]=[PTBR+i+1];
	i=i+2;
endwhile;

//Stack entries are already set earlier

//Copiying user stack contents of parent to child
alias parent_stack R8;
alias child_stack R7;

parent_stack =  [PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+16];
child_stack = [PAGE_TABLE_BASE+NEW_PID*20+16];
i=0;
while(i<=511) do
	[child_stack*512+i] = [parent_stack*512+i];
	i=i+1;
endwhile;
// Second stack page
parent_stack =  [PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+18];
child_stack = [PAGE_TABLE_BASE+NEW_PID*20+18];
i=0;
while(i<=511) do
	[child_stack*512+i] = [parent_stack*512+i];
	i=i+1;
endwhile;
//Storing BP on top of kernel stack of newly created process
[ParentUapage] = BP;
//Setting up return values in user stacks of parent and child
//parent
[( [PTBR+ 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]= NEW_PID;
//[physicalAddrRetVal] = NEW_PID;

//child
[([NEW_PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]=0;
//[physicalAddrRetVal] = 0;

//reset the mode flag of parent process to 0
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

//changing back to user stack
SP = userSP;
breakpoint;
ireturn;