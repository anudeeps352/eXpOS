
//PROCESS MANAGER MODULE
alias funcNum R1;
alias PID R2;
alias page R4;
alias i R9;


//GET PCB ENTRY Function
if(funcNum == 1) then
    i = 1;
    
    while(i < 16) do
        if([PROCESS_TABLE + (i*16) + 4] == TERMINATED) then
            [PROCESS_TABLE + (i*16) + 1] = i;   //PID
            [PROCESS_TABLE + (i*16) + 4] = ALLOCATED;   
            [PROCESS_TABLE + (i*16) + 14] = PAGE_TABLE_BASE + (i*20);   //PTBR of Process
            [PROCESS_TABLE + (i*16) + 15] = 10;     //PTLR = 10
            
            R0 = i;
            return;
        endif;
        i = i + 1;
    endwhile;
    R0 = -1;    //No Free PCB Entry
	print "NO PCB";
    return;    
endif;
   


//FREE USER AREA PAGE Function
if(funcNum == 2) then
    //Releasing Semaphores
    page = [PROCESS_TABLE + (PID*16) + 11]*512;    //User Area Page Starting Address
    i=496;   
    
    while(i < 512) do
        if([page + i] == SEMAPHORE) then    //Resource is a Semaphore
            multipush(R1,R2,R3,R4,R9);
            R1 = RELEASE_SEMAPHORE;
            R2 = PID;
            R3 = [page + i + 1];    //Semaphore Index
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3,R4,R9);
        endif;
        
		if([page + i] == FILE) then    //Resource is a file
            multipush(R1,R2,R3,R4,R9);
            R1 = CLOSE;
            R2 = [page + i + 1];
            call FILE_MANAGER;
            multipop(R1,R2,R3,R4,R9);
        endif;

        i = i + 2;
    endwhile;
    
    
	multipush(R1,R2,R3);
	R1=2;					//Function number for RELEASE_PAGE in Memory Manager Module
	R2=[PROCESS_TABLE + 16*PID +11];	//Storing User Area Page number of current process
	call MEMORY_MANAGER;
	multipop(R1,R2,R3);

	return;
endif;		


//FREE PAGE TABLE Function
if(funcNum == 4) then

	//We shall not de-allocate library pages as they are common for all processe
	
    PTBR=[PROCESS_TABLE + PID*16 + 14];
	page=2;
	
	while(page<10) do
		if([PTBR + 2*page] != -1) then
		
			multipush(R0,R1,R2,R4);			//Function number for RELEASE_PAGE in Memory Manager Module
			R1=2;
			R2=[PTBR + 2*page];
			call MEMORY_MANAGER;
			multipop(R0,R1,R2,R4);

			[PTBR + 2*page] = -1;
			[PTBR + 2*page + 1] = "0000";
		endif;
		
		page=page+1;
	endwhile;
	
	page=2;
	//Checking Heap and Stack area enries in the Disk Map Table
	//To check whether they were swapped, if yes, free those blocks
	while(page<10) do
	    if([DISK_MAP_TABLE + (PID*10) + page] != -1) then
	        multipush(R0,R1,R2,R4);
	        R1 = RELEASE_BLOCK;
	        //R2 already has PID
	        R3 = [DISK_MAP_TABLE + (PID*10) + page];    //Block No
	        call MEMORY_MANAGER;
	        multipop(R0,R1,R2,R4);
	    endif;
	    
	    [DISK_MAP_TABLE + (PID*10) + page] = -1;    //Invalidating Entries in the Disk Map Table
	    
	    if(page == 3) then
	        page = page + 5;    //i.e., to skip code area --(4-7)
	    else
	        page = page + 1;
	    endif;
	endwhile;
	
	return;
endif;
			


//EXIT PROCESS FUNCTION
if(funcNum == 3) then
	//Waking up waiting processes & Setting PPID=-1 for child processes
	if([PROCESS_TABLE + 16*PID + 9] != 9) then
	    i = 0;
	    while(i < MAX_PROC_NUM) do
		    //Waking processes waiting for current process
		    if([PROCESS_TABLE + 16*i + 4] == WAIT_PROCESS  &&  [PROCESS_TABLE + 16*i + 5] == PID) then
			    [PROCESS_TABLE + 16*i + 4]  = READY;
		    endif;
		    
		    //Setting child processes as Orphan 
		    if([PROCESS_TABLE + 16*i + 2] == PID) then
			    [PROCESS_TABLE + 16*i + 2]  = -1;
		    endif;
		    
	        i = i + 1;
	    endwhile;
	endif;

	multipush(R1,R2,R3);
	R1=4;	    		//Function number for FREE_PAGE_TABLE in Process Manager Module
	R2=PID;
	call PROCESS_MANAGER;
	multipop(R1,R2,R3);
	
	multipush(R1,R2,R3);
	R1=2;					//Function number for FREE_USER_AREA_PAGE in Process Manager Module
	R2=PID;
	call PROCESS_MANAGER;
	multipop(R1,R2,R3);
	
	[PROCESS_TABLE + 16*PID + 4]=TERMINATED;
	
	return;
endif;

if(funcNum==5)then   //kill all
	alias i R3;

    i = 0;
    while(i < MAX_FILE_NUM) do
        if([INODE_TABLE + 16*i + 1] != -1) then
            multipush(R1, R2, R3, R4);
            R1 = ACQUIRE_INODE;
            R2 = PID;
            R3 = i;
            call RESOURCE_MANAGER;
            multipop(R1, R2, R3, R4);
        endif;
        i = i + 1;
    endwhile;

	i = 2;						//terminate processes other than init and idle,PID 0 is idle and 1 is init 
    while(i < 16-1) do
        if(i != PID && [PROCESS_TABLE + 16*i + 4] != TERMINATED) then
            multipush(R1, R2, R3, R4);
            R1 = EXIT_PROCESS;
            R2 = i;
            call PROCESS_MANAGER;
            multipop(R1, R2, R3, R4);
        endif;
        i = i + 1;
    endwhile;

	i = 0;
    while(i < MAX_FILE_NUM) do
        if([INODE_TABLE + 16*i + 1] != -1) then
            multipush(R1, R2, R3, R4);
            R1 = RELEASE_INODE;
            R2 = PID;
            R3 = i;
            call RESOURCE_MANAGER;
            multipop(R1, R2, R3, R4);
        endif;
        i = i + 1;
    endwhile;

	 return;
endif;



