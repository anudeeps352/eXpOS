alias functionNum R1;
alias currentPID R2;
alias pageNum R3;
alias blockNum R4;



if(functionNum==2) then					//disk load
	multipush(R1,R2,R3,R4);
	functionNum=3;
	call MOD_0;					//calling acquire disk function
	multipop(R1,R2,R3,R4);
	
	//updating Disk Status Table
	
	[DISK_STATUS_TABLE + 1] = 0;
	[DISK_STATUS_TABLE + 2] = pageNum;
	[DISK_STATUS_TABLE + 3] = blockNum;
	
	
	load(R3,R4);					//Loading from disk to memory
	
	[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
	
	multipush(R1,R2,R3,R4);
	call MOD_5;					//Invoking scheduler
	multipop(R1,R2,R3,R4);
	
	return;
	
endif;





if(functionNum==3 || functionNum==4) then		//read and write

	//Calling acquire terminal
		multipush(R1,R2);

		functionNum=8;
		call MOD_0;

		multipop(R1,R2);

		if(functionNum==3) then
			print R3;
		endif;
	
		if(functionNum==4) then

			read;
			[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
		
			//Invoking Scheduler
				multipush(R1,R2,R3);
				call SCHEDULER;
				multipop(R1,R2,R3);
			
			alias address R3;
			alias phys_address R4;
			phys_address= ([PTBR + 2*(address/512)]*512) + (address % 512);
			[phys_address]=[PROCESS_TABLE + (currentPID * 16) + 8];
			return;
	
		endif;

	//Calling release terminal
	multipush(R1,R2);

	functionNum=9;

	call MOD_0;

	multipop(R1,R2);

	return;
	
endif;


