//MEMORY MANAGER MODULE


alias retval R0;
alias funcNum R1;
alias page R2;
alias i R3;


//RELEASE_PAGE FUNCTION

	if (funcNum==2) then
		
		//Decreasing corresponding page entry in MEMORY_FREE_LIST
		[MEMORY_FREE_LIST + page] = [MEMORY_FREE_LIST + page] - 1;
		
		if([MEMORY_FREE_LIST + page]==0) then
			[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE +2] + 1; 	//Increasing MEM_FREE_COUNT 
			
			i=0;
			while(i<16) do							//Changing state of all WAIT_MEM processes to READY
				if([PROCESS_TABLE + i*16 + 4]==WAIT_MEM) then
					[PROCESS_TABLE + i*16 + 4]=READY;
				endif;
				i=i+1;
			endwhile;
		endif;
		
		R0=page;
		return;
	endif;
	
	
	
	
	
//GET FREE PAGE FUNCTION

	if (funcNum==1) then
	
		[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;		//Increasing WAIT_MEM count
		
		while([SYSTEM_STATUS_TABLE + 2] == 0) do				//While memory is full, invoking another process
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 +4] = WAIT_MEM;
			multipush(R0,R1,R2,R3);
			call MOD_5;
			multipop(R0,R1,R2,R3);
		endwhile;
		
		
		[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;		//Decreasing WAIT_MEM count
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;		//Decreasing MEM_FREE_LIST
		
		
		i=0;									
		while(i<MAX_MEM_PAGE) do						//Checking for a free page in memory
			if([MEMORY_FREE_LIST + i]==0) then
				[MEMORY_FREE_LIST + i] = 1;
				retval=i;						//Storing the free page number as return value;
				return;
			endif;
			i=i+1;
		endwhile;
	endif;

